$date
  Sat Jun 17 13:22:49 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 8 ! a[7:0] $end
$var reg 8 " b[7:0] $end
$var reg 3 # s[2:0] $end
$scope module res $end
$var reg 8 $ a[7:0] $end
$var reg 8 % b[7:0] $end
$var reg 3 & s[2:0] $end
$var reg 8 ' r[7:0] $end
$var reg 8 ( suma[7:0] $end
$var reg 8 ) resta[7:0] $end
$var reg 8 * aadd[7:0] $end
$var reg 8 + badd[7:0] $end
$var reg 8 , atransf[7:0] $end
$var reg 8 - btransf[7:0] $end
$var reg 1 . cout $end
$var reg 1 / v $end
$scope module sum $end
$var reg 8 0 a[7:0] $end
$var reg 8 1 b[7:0] $end
$var reg 1 2 cin $end
$var reg 1 3 s $end
$var reg 8 4 r[7:0] $end
$var reg 1 5 cout $end
$var reg 1 6 v $end
$var reg 8 7 bp[7:0] $end
$var reg 7 8 c[6:0] $end
$var reg 1 9 w $end
$var reg 1 : cinp $end
$scope module sumador8bits0 $end
$var reg 8 ; a[7:0] $end
$var reg 8 < b[7:0] $end
$var reg 1 = cin $end
$var reg 8 > r[7:0] $end
$var reg 1 ? cout $end
$var reg 1 @ v $end
$var reg 7 A c[6:0] $end
$var reg 1 B w $end
$scope module sumador0 $end
$var reg 1 C a $end
$var reg 1 D b $end
$var reg 1 E cin $end
$var reg 1 F r $end
$var reg 1 G cout $end
$upscope $end
$scope module sumador1 $end
$var reg 1 H a $end
$var reg 1 I b $end
$var reg 1 J cin $end
$var reg 1 K r $end
$var reg 1 L cout $end
$upscope $end
$scope module sumador2 $end
$var reg 1 M a $end
$var reg 1 N b $end
$var reg 1 O cin $end
$var reg 1 P r $end
$var reg 1 Q cout $end
$upscope $end
$scope module sumador3 $end
$var reg 1 R a $end
$var reg 1 S b $end
$var reg 1 T cin $end
$var reg 1 U r $end
$var reg 1 V cout $end
$upscope $end
$scope module sumador4 $end
$var reg 1 W a $end
$var reg 1 X b $end
$var reg 1 Y cin $end
$var reg 1 Z r $end
$var reg 1 [ cout $end
$upscope $end
$scope module sumador5 $end
$var reg 1 \ a $end
$var reg 1 ] b $end
$var reg 1 ^ cin $end
$var reg 1 _ r $end
$var reg 1 ` cout $end
$upscope $end
$scope module sumador6 $end
$var reg 1 a a $end
$var reg 1 b b $end
$var reg 1 c cin $end
$var reg 1 d r $end
$var reg 1 e cout $end
$upscope $end
$scope module sumador7 $end
$var reg 1 f a $end
$var reg 1 g b $end
$var reg 1 h cin $end
$var reg 1 i r $end
$var reg 1 j cout $end
$upscope $end
$upscope $end
$upscope $end
$scope module dec $end
$var reg 8 k a[7:0] $end
$var reg 8 l b[7:0] $end
$var reg 1 m cin $end
$var reg 1 n s $end
$var reg 8 o r[7:0] $end
$var reg 1 p cout $end
$var reg 1 q v $end
$var reg 8 r bp[7:0] $end
$var reg 7 s c[6:0] $end
$var reg 1 t w $end
$var reg 1 u cinp $end
$scope module sumador8bits0 $end
$var reg 8 v a[7:0] $end
$var reg 8 w b[7:0] $end
$var reg 1 x cin $end
$var reg 8 y r[7:0] $end
$var reg 1 z cout $end
$var reg 1 { v $end
$var reg 7 | c[6:0] $end
$var reg 1 } w $end
$scope module sumador0 $end
$var reg 1 !" a $end
$var reg 1 "" b $end
$var reg 1 #" cin $end
$var reg 1 $" r $end
$var reg 1 %" cout $end
$upscope $end
$scope module sumador1 $end
$var reg 1 &" a $end
$var reg 1 '" b $end
$var reg 1 (" cin $end
$var reg 1 )" r $end
$var reg 1 *" cout $end
$upscope $end
$scope module sumador2 $end
$var reg 1 +" a $end
$var reg 1 ," b $end
$var reg 1 -" cin $end
$var reg 1 ." r $end
$var reg 1 /" cout $end
$upscope $end
$scope module sumador3 $end
$var reg 1 0" a $end
$var reg 1 1" b $end
$var reg 1 2" cin $end
$var reg 1 3" r $end
$var reg 1 4" cout $end
$upscope $end
$scope module sumador4 $end
$var reg 1 5" a $end
$var reg 1 6" b $end
$var reg 1 7" cin $end
$var reg 1 8" r $end
$var reg 1 9" cout $end
$upscope $end
$scope module sumador5 $end
$var reg 1 :" a $end
$var reg 1 ;" b $end
$var reg 1 <" cin $end
$var reg 1 =" r $end
$var reg 1 >" cout $end
$upscope $end
$scope module sumador6 $end
$var reg 1 ?" a $end
$var reg 1 @" b $end
$var reg 1 A" cin $end
$var reg 1 B" r $end
$var reg 1 C" cout $end
$upscope $end
$scope module sumador7 $end
$var reg 1 D" a $end
$var reg 1 E" b $end
$var reg 1 F" cin $end
$var reg 1 G" r $end
$var reg 1 H" cout $end
$upscope $end
$upscope $end
$upscope $end
$scope module aadd_c $end
$var reg 8 I" a[7:0] $end
$var reg 8 J" b[7:0] $end
$var reg 1 K" cin $end
$var reg 1 L" s $end
$var reg 8 M" r[7:0] $end
$var reg 1 N" cout $end
$var reg 1 O" v $end
$var reg 8 P" bp[7:0] $end
$var reg 7 Q" c[6:0] $end
$var reg 1 R" w $end
$var reg 1 S" cinp $end
$scope module sumador8bits0 $end
$var reg 8 T" a[7:0] $end
$var reg 8 U" b[7:0] $end
$var reg 1 V" cin $end
$var reg 8 W" r[7:0] $end
$var reg 1 X" cout $end
$var reg 1 Y" v $end
$var reg 7 Z" c[6:0] $end
$var reg 1 [" w $end
$scope module sumador0 $end
$var reg 1 \" a $end
$var reg 1 ]" b $end
$var reg 1 ^" cin $end
$var reg 1 _" r $end
$var reg 1 `" cout $end
$upscope $end
$scope module sumador1 $end
$var reg 1 a" a $end
$var reg 1 b" b $end
$var reg 1 c" cin $end
$var reg 1 d" r $end
$var reg 1 e" cout $end
$upscope $end
$scope module sumador2 $end
$var reg 1 f" a $end
$var reg 1 g" b $end
$var reg 1 h" cin $end
$var reg 1 i" r $end
$var reg 1 j" cout $end
$upscope $end
$scope module sumador3 $end
$var reg 1 k" a $end
$var reg 1 l" b $end
$var reg 1 m" cin $end
$var reg 1 n" r $end
$var reg 1 o" cout $end
$upscope $end
$scope module sumador4 $end
$var reg 1 p" a $end
$var reg 1 q" b $end
$var reg 1 r" cin $end
$var reg 1 s" r $end
$var reg 1 t" cout $end
$upscope $end
$scope module sumador5 $end
$var reg 1 u" a $end
$var reg 1 v" b $end
$var reg 1 w" cin $end
$var reg 1 x" r $end
$var reg 1 y" cout $end
$upscope $end
$scope module sumador6 $end
$var reg 1 z" a $end
$var reg 1 {" b $end
$var reg 1 |" cin $end
$var reg 1 }" r $end
$var reg 1 !# cout $end
$upscope $end
$scope module sumador7 $end
$var reg 1 "# a $end
$var reg 1 ## b $end
$var reg 1 $# cin $end
$var reg 1 %# r $end
$var reg 1 &# cout $end
$upscope $end
$upscope $end
$upscope $end
$scope module badd_c $end
$var reg 8 '# a[7:0] $end
$var reg 8 (# b[7:0] $end
$var reg 1 )# cin $end
$var reg 1 *# s $end
$var reg 8 +# r[7:0] $end
$var reg 1 ,# cout $end
$var reg 1 -# v $end
$var reg 8 .# bp[7:0] $end
$var reg 7 /# c[6:0] $end
$var reg 1 0# w $end
$var reg 1 1# cinp $end
$scope module sumador8bits0 $end
$var reg 8 2# a[7:0] $end
$var reg 8 3# b[7:0] $end
$var reg 1 4# cin $end
$var reg 8 5# r[7:0] $end
$var reg 1 6# cout $end
$var reg 1 7# v $end
$var reg 7 8# c[6:0] $end
$var reg 1 9# w $end
$scope module sumador0 $end
$var reg 1 :# a $end
$var reg 1 ;# b $end
$var reg 1 <# cin $end
$var reg 1 =# r $end
$var reg 1 ># cout $end
$upscope $end
$scope module sumador1 $end
$var reg 1 ?# a $end
$var reg 1 @# b $end
$var reg 1 A# cin $end
$var reg 1 B# r $end
$var reg 1 C# cout $end
$upscope $end
$scope module sumador2 $end
$var reg 1 D# a $end
$var reg 1 E# b $end
$var reg 1 F# cin $end
$var reg 1 G# r $end
$var reg 1 H# cout $end
$upscope $end
$scope module sumador3 $end
$var reg 1 I# a $end
$var reg 1 J# b $end
$var reg 1 K# cin $end
$var reg 1 L# r $end
$var reg 1 M# cout $end
$upscope $end
$scope module sumador4 $end
$var reg 1 N# a $end
$var reg 1 O# b $end
$var reg 1 P# cin $end
$var reg 1 Q# r $end
$var reg 1 R# cout $end
$upscope $end
$scope module sumador5 $end
$var reg 1 S# a $end
$var reg 1 T# b $end
$var reg 1 U# cin $end
$var reg 1 V# r $end
$var reg 1 W# cout $end
$upscope $end
$scope module sumador6 $end
$var reg 1 X# a $end
$var reg 1 Y# b $end
$var reg 1 Z# cin $end
$var reg 1 [# r $end
$var reg 1 \# cout $end
$upscope $end
$scope module sumador7 $end
$var reg 1 ]# a $end
$var reg 1 ^# b $end
$var reg 1 _# cin $end
$var reg 1 `# r $end
$var reg 1 a# cout $end
$upscope $end
$upscope $end
$upscope $end
$scope module mux1 $end
$var reg 1 b# a1 $end
$var reg 1 c# a2 $end
$var reg 1 d# a3 $end
$var reg 1 e# a4 $end
$var reg 1 f# a5 $end
$var reg 1 g# a6 $end
$var reg 1 h# a7 $end
$var reg 1 i# a8 $end
$var reg 3 j# s[2:0] $end
$var reg 1 k# r $end
$upscope $end
$scope module mux2 $end
$var reg 1 l# a1 $end
$var reg 1 m# a2 $end
$var reg 1 n# a3 $end
$var reg 1 o# a4 $end
$var reg 1 p# a5 $end
$var reg 1 q# a6 $end
$var reg 1 r# a7 $end
$var reg 1 s# a8 $end
$var reg 3 t# s[2:0] $end
$var reg 1 u# r $end
$upscope $end
$scope module mux3 $end
$var reg 1 v# a1 $end
$var reg 1 w# a2 $end
$var reg 1 x# a3 $end
$var reg 1 y# a4 $end
$var reg 1 z# a5 $end
$var reg 1 {# a6 $end
$var reg 1 |# a7 $end
$var reg 1 }# a8 $end
$var reg 3 !$ s[2:0] $end
$var reg 1 "$ r $end
$upscope $end
$scope module mux4 $end
$var reg 1 #$ a1 $end
$var reg 1 $$ a2 $end
$var reg 1 %$ a3 $end
$var reg 1 &$ a4 $end
$var reg 1 '$ a5 $end
$var reg 1 ($ a6 $end
$var reg 1 )$ a7 $end
$var reg 1 *$ a8 $end
$var reg 3 +$ s[2:0] $end
$var reg 1 ,$ r $end
$upscope $end
$scope module mux5 $end
$var reg 1 -$ a1 $end
$var reg 1 .$ a2 $end
$var reg 1 /$ a3 $end
$var reg 1 0$ a4 $end
$var reg 1 1$ a5 $end
$var reg 1 2$ a6 $end
$var reg 1 3$ a7 $end
$var reg 1 4$ a8 $end
$var reg 3 5$ s[2:0] $end
$var reg 1 6$ r $end
$upscope $end
$scope module mux6 $end
$var reg 1 7$ a1 $end
$var reg 1 8$ a2 $end
$var reg 1 9$ a3 $end
$var reg 1 :$ a4 $end
$var reg 1 ;$ a5 $end
$var reg 1 <$ a6 $end
$var reg 1 =$ a7 $end
$var reg 1 >$ a8 $end
$var reg 3 ?$ s[2:0] $end
$var reg 1 @$ r $end
$upscope $end
$scope module mux7 $end
$var reg 1 A$ a1 $end
$var reg 1 B$ a2 $end
$var reg 1 C$ a3 $end
$var reg 1 D$ a4 $end
$var reg 1 E$ a5 $end
$var reg 1 F$ a6 $end
$var reg 1 G$ a7 $end
$var reg 1 H$ a8 $end
$var reg 3 I$ s[2:0] $end
$var reg 1 J$ r $end
$upscope $end
$scope module mux8 $end
$var reg 1 K$ a1 $end
$var reg 1 L$ a2 $end
$var reg 1 M$ a3 $end
$var reg 1 N$ a4 $end
$var reg 1 O$ a5 $end
$var reg 1 P$ a6 $end
$var reg 1 Q$ a7 $end
$var reg 1 R$ a8 $end
$var reg 3 S$ s[2:0] $end
$var reg 1 T$ r $end
$upscope $end
$upscope $end
$enddefinitions $end
